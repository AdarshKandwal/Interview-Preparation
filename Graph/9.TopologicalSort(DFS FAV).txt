#include<bits/stdc++.h> 
using namespace std; 


void dfs(vector<int>adj[],int source, stack<int> &st , vector<bool> &visited){
    
    visited[source]=true;
    for(int x : adj[source]){
        if(visited[x]==false) 
            dfs(adj,x,st,visited);
    }
        
    st.push(source);
}


void dfs_helper(vector<int> adj[],int V){
    vector<bool> visited(V,false);
    stack<int> st;
    
    for(int i=0;i<V;i++) if(visited[i]==false) dfs(adj,i,st,visited);
    
      while(st.empty()==false){
        int u=st.top();
        st.pop();
        cout<<u<<" ";
    }
    
    
}

void addEdge(vector<int> adj[], int u, int v){
    adj[u].push_back(v);
}

int main() 
{ 
	int V=5;
	vector<int> adj[V];
	addEdge(adj,0, 1); 
    addEdge(adj,1, 3); 
    addEdge(adj,2, 3); 
    addEdge(adj,3, 4); 
    addEdge(adj,2, 4);  
  
    cout << "Following is a Topological Sort of\n"; 
    dfs_helper(adj,V);

	return 0; 
} 
