#include<bits/stdc++.h>
using namespace std;


void bfs(vector<int> adj[],int source, bool visited[]){
    //step1
  
    queue<int> q;
    q.push(source);
    visited[source]=true;
    //step2
    while(q.empty()==false){
        int u=q.front();
        q.pop();
        cout<<" "<<u;
        for(int v : adj[u]){
            if(visited[v]==false){
                q.push(v);
                visited[v]=true;
            }
        }
    }
    
}

void bfs_helper(vector<int> adj[] , int v){
    bool visited[v];
    for(int i=0;i<v;i++) 
        visited[i]=false;
    
    for(int i=0;i<v;i++){
        if(visited[i]==false) 
            bfs(adj,i,visited);
    }
}

void addEdge(vector<int> adj[], int u,int v){
    adj[u].push_back(v);
    adj[v].push_back(u);
}

int main(){
    
   	int V=7;
	vector<int> adj[V];
	addEdge(adj,0,1); 
	addEdge(adj,0,2); 
	addEdge(adj,2,3); 
	addEdge(adj,1,3); 
	addEdge(adj,4,5);
	addEdge(adj,5,6);
	addEdge(adj,4,6);
	
	cout << "Following is Breadth First Traversal: "<< endl; 
	bfs_helper(adj,V); 


    return 0;
}