struct Node{
    int key;
    Node  *left;
    Node *right;
    
    Node (int x){
        key=x;
        left=right=NULL;
    }
};

int height(Node *root){
    if(root==NULL)return 0;
    return 1+max(height(root->left),height(root->right));
}

int diameter(Node *root){
    int d1=1+height(root->left)+height(root->right);
    int d2=height(root->left);
    int d3=height(root->right);
    return max(d1,max(d2,d3));
}

int res=0;
int diameterOptimized(Node *root){
    if(root == NULL)
        return 0;
    int lh=diameterOptimized(root->left);
    int rh=diameterOptimized(root->right);
    res=max(res,(1+lh+rh));
    return 1+max(lh,rh); 
}


int main()
{   
	Node *root=new Node(1);
	root->left=new Node(2);
	root->right=new Node(3);
	root->left->left=new Node(4);
	root->left->right=new Node(5);
	root->right->left=new Node(6);
	root->right->right=new Node(7);
	
	diameterOptimized(root);
	cout<<res;
	diameter(root);
    return 0;
}
